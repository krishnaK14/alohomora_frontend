{"version":3,"sources":["constants/actionTypes.js","reducers/index.js","reducers/authReducer.js","store/index.js","utils/historyUtils.js","constants/urls.js","utils/authUtils.js","actions/authActions.js","components/auth/RequireAuth.js","utils/renderUtils.js","components/auth/Login.js","components/auth/Logout.js","components/auth/Signup.js","components/auth/SignupDone.js","components/auth/AccountActivation.js","components/auth/PasswordChange.js","components/auth/PasswordReset.js","components/auth/PasswordResetDone.js","components/auth/PasswordResetConfirm.js","components/NoMatch.js","components/HomePage/Question.js","components/HomePage/HomePage.js","components/MainContent.js","components/App.js","index.js"],"names":["AuthTypes","rootReducer","combineReducers","form","formReducer","notifs","notifReducer","auth","state","action","type","authenticated","token","payload","store","initialState","logger","createLogger","middleware","applyMiddleware","thunk","compose","createStoreWithMiddleware","createStore","configureStore","createHistory","ROOT_URL","AuthUrls","LOGIN","SIGNUP","CHANGE_PASSWORD","RESET_PASSWORD","RESET_PASSWORD_CONFIRM","USER_ACTIVATION","USER_PROFILE","AlohomoraUrls","PROFILE","QUESTION","CHECK_ANSWER","SELF_USER","getUserToken","notifSend","notifActions","authLogin","processServerError","error","Object","keys","reduce","newDict","key","push","ComposedComponent","Authentication","this","checkAuthentication","props","nextProps","history","Component","withRouter","connect","renderField","input","label","meta","touched","className","renderError","errorMessages","Login","handleSubmit","onSubmit","Field","name","component","validate","required","message","Link","to","reduxForm","formValues","dispatch","loginUrl","axios","post","then","response","data","localStorage","setItem","catch","processedError","SubmissionError","Logout","logoutUser","removeItem","Signup","values","errors","password1","password2","signupUrl","SignupDone","AccountActivation","match","params","activateUserUrl","get","kind","dismissAfter","PasswordChange","changePasswordUrl","getState","headers","authorization","new_password1","new_password2","PasswordReset","resetPasswordUrl","PasswordResetDone","PasswordResetConfirm","uid","resetPasswordConfirmUrl","assign","NoMatch","Question","answerChangeHandle","e","setState","answer","target","value","checkAnswer","checkAnswerUrl","formData","FormData","append","method","url","console","log","handleKeyPress","questionInfo","question_on","questionUrl","toString","reqToGetQuestion","all","spread","questionRes","Container","textAlign","text","image","Image","centered","src","size","question_text","Segment","Input","focus","placeholder","onChange","onKeyPress","Button","positive","onClick","HomePage","userInfo","profileInfo","loaded","selfUserUrl","profileUrl","reqToSelfUser","reqToProfile","selfUserRes","profileRes","results","Fragment","Sidebar","as","Menu","animation","icon","inverted","vertical","visible","width","direction","style","Label","color","map","userprofile","index","Item","header","user","username","Pusher","Loader","active","MainContent","Switch","Route","exact","path","RequireAuth","App","getItem","ReactDOM","render","Router","document","getElementById"],"mappings":"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","file":"static/js/main.bceb33c1.chunk.js","sourcesContent":["export const AuthTypes = {\n  LOGIN: \"LOGIN\",\n  LOGOUT: \"LOGOUT\",\n  CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\n  USER_PROFILE: \"USER_PROFILE\",\n};\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport { reducer as notifReducer } from \"redux-notifications\";\n\nimport authReducer from \"./authReducer\";\n\nconst rootReducer = combineReducers({\n  form: formReducer,\n  notifs: notifReducer,\n  auth: authReducer,\n});\n\nexport default rootReducer;\n","import { AuthTypes } from \"../constants/actionTypes\";\n\nexport default function (state = {}, action) {\n  switch (action.type) {\n    case AuthTypes.LOGIN:\n      return { ...state, authenticated: true, token: action.payload };\n    case AuthTypes.LOGOUT:\n      return { ...state, authenticated: false, token: null };\n  }\n  return state;\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"../reducers\";\n\nfunction configureStore(initialState) {\n  let createStoreWithMiddleware;\n\n  const logger = createLogger();\n  const middleware = applyMiddleware(thunk, logger);\n\n  createStoreWithMiddleware = compose(middleware);\n\n  return createStoreWithMiddleware(createStore)(rootReducer, initialState);\n}\n\nlet store = configureStore();\n\nexport default store;\n","import createHistory from \"history/createBrowserHistory\";\nexport default createHistory();\n","export const ROOT_URL = \"http://localhost:8000\";\n\nexport const AuthUrls = {\n  LOGIN: `${ROOT_URL}/api/auth/login/`,\n  SIGNUP: `${ROOT_URL}/api/registration/`,\n  CHANGE_PASSWORD: `${ROOT_URL}/api/auth/password/change/`,\n  RESET_PASSWORD: `${ROOT_URL}/api/auth/password/reset/`,\n  RESET_PASSWORD_CONFIRM: `${ROOT_URL}/api/auth/password/reset/confirm/`,\n  USER_ACTIVATION: `${ROOT_URL}/api/registration/account-confirm-email/`,\n  USER_PROFILE: `${ROOT_URL}/rest-auth/user/`,\n};\n\nexport const AlohomoraUrls = {\n  PROFILE: `${ROOT_URL}/alohomora/profile/`,\n  QUESTION: `${ROOT_URL}/alohomora/question/`,\n  CHECK_ANSWER: `${ROOT_URL}/alohomora/check_answer`,\n  SELF_USER: `${ROOT_URL}/alohomora/self_user`,\n};\n","export function getUserToken(state) {\n  return state.auth.token;\n}\n","import axios from \"axios\";\nimport { SubmissionError } from 'redux-form';\nimport history from \"../utils/historyUtils\";\nimport { actions as notifActions } from 'redux-notifications';\n\nimport { AuthTypes } from \"../constants/actionTypes\";\nimport { AuthUrls } from \"../constants/urls\";\nimport store from \"../store\";\nimport { getUserToken } from \"../utils/authUtils\";\n\nconst { notifSend } = notifActions;\n\nexport function authLogin(token) {\n    return {\n        type: AuthTypes.LOGIN,\n        payload: token\n    };\n}\n\nexport function loginUser(formValues, dispatch, props) {\n        const loginUrl = AuthUrls.LOGIN;\n\n        return axios.post(loginUrl, formValues).then((response) => {\n            // If request is good...\n            // Update state to indicate user is authenticated\n            const token = response.data.key;\n            dispatch(authLogin(token));\n\n            localStorage.setItem(\"token\", token);\n\n            // redirect to the route '/'\n            history.push(\"/\");\n        }).catch(error => {\n            const processedError = processServerError(error.response.data);\n            throw new SubmissionError(processedError);\n        });\n}\n\nexport function logoutUser() {\n    localStorage.removeItem(\"token\");\n    return {\n        type: AuthTypes.LOGOUT\n    };\n}\n\nexport function signupUser(formValues, dispatch, props) {\n    const signupUrl = AuthUrls.SIGNUP;\n\n    return axios.post(signupUrl, formValues)\n        .then((response) => {\n            // If request is good...\n            // you can login if email verification is turned off.\n            // const token = response.data.key;\n            // dispatch(authLogin(token));\n            // localStorage.setItem(\"token\", token);\n\n            // email need to be verified, so don't login and send user to signup_done page.\n            // redirect to signup done page.\n            history.push(\"/signup_done\");\n        })\n        .catch((error) => {\n            // If request is bad...\n            // Show an error to the user\n            const processedError = processServerError(error.response.data);\n            throw new SubmissionError(processedError);\n            \n        });\n}\n\n// function setUserProfile(payload) {\n//     return {\n//         type: AuthTypes.USER_PROFILE,\n//         payload: payload\n//     };\n// }\n\nexport function changePassword(formValues, dispatch, props) {\n    const changePasswordUrl = AuthUrls.CHANGE_PASSWORD;\n    const token = getUserToken(store.getState());\n    if (token) {\n        return axios.post(changePasswordUrl, formValues, {\n            headers: {\n                authorization: 'Token ' + token\n            }\n        })\n            .then((response) => {\n                dispatch(notifSend({\n                    message: \"Password has been changed successfully\",\n                    kind: \"info\",\n                    dismissAfter: 5000\n                }));\n                // redirect to the route '/profile'\n                history.push(\"/profile\");\n            })\n            .catch((error) => {\n                // If request is bad...\n                // Show an error to the user\n                const processedError = processServerError(error.response.data);\n                throw new SubmissionError(processedError);\n            });\n    }\n}\n\nexport function resetPassword(formValues, dispatch, props) {\n    const resetPasswordUrl = AuthUrls.RESET_PASSWORD;\n\n    return axios.post(resetPasswordUrl, formValues)\n        .then(response => {\n            // redirect to reset done page\n            history.push(\"/reset_password_done\");\n        }).catch((error) => {\n            // If request is bad...\n            // Show an error to the user\n            const processedError = processServerError(error.response.data);\n            throw new SubmissionError(processedError);\n        });\n}\n\nexport function confirmPasswordChange(formValues, dispatch, props) {\n    const { uid, token } = props.match.params;\n    const resetPasswordConfirmUrl = AuthUrls.RESET_PASSWORD_CONFIRM;\n    const data = Object.assign(formValues, { uid, token });\n\n    return axios.post(resetPasswordConfirmUrl, data)\n        .then(response => {\n            dispatch(notifSend({\n                message: \"Password has been reset successfully, please log in\",\n                kind: \"info\",\n                dismissAfter: 5000\n            }));\n\n            history.push(\"/login\");\n        }).catch((error) => {\n            // If request is bad...\n            // Show an error to the user\n            const processedError = processServerError(error.response.data);\n            throw new SubmissionError(processedError);\n        });\n}\n\nexport function activateUserAccount(formValues, dispatch, props) {\n    const { key } = props.match.params;\n    const activateUserUrl = AuthUrls.USER_ACTIVATION + key;\n    \n    return axios.get(activateUserUrl)\n        .then(response => {\n            dispatch(notifSend({\n                message: \"Your account has been activated successfully, please log in\",\n                kind: \"info\",\n                dismissAfter: 5000\n            }));\n\n            history.push(\"/login\");\n        }).catch((error) => {\n            // If request is bad...\n            // Show an error to the user\n            const processedError = processServerError(error.response.data);\n            throw new SubmissionError(processedError);\n        });\n}\n// util functions\nfunction processServerError(error) {\n    return  Object.keys(error).reduce(function(newDict, key) {\n        if (key === \"non_field_errors\") {\n            newDict[\"_error\"].push(error[key]);\n        } else if (key === \"token\") {\n            // token sent with request is invalid\n            newDict[\"_error\"].push(\"The link is not valid any more.\");\n        } else {\n            newDict[key] = error[key];\n        }\n\n        return newDict\n    }, {\"_error\": []});\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {withRouter} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nexport default function(ComposedComponent) {\n    class Authentication extends Component {\n\n        static propTypes = {\n            history: PropTypes.object\n        };\n\n        componentWillMount() {\n            this.checkAuthentication(this.props);\n\n        }\n\n        componentWillUpdate(nextProps) {\n            this.checkAuthentication(nextProps);\n        }\n\n        checkAuthentication(props) {\n            if (!props.authenticated) {\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }\n\n    function mapStateToProps(state) {\n        return { authenticated: state.auth.authenticated }\n    }\n    return withRouter(connect(mapStateToProps)(Authentication));\n}\n","import React from \"react\";\n\nexport const renderField = ({\n  input,\n  label,\n  type,\n  meta: { touched, error },\n}) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <input className=\"form-control\" {...input} type={type} />\n    </div>\n    {touched && error && (\n      <div className=\"alert alert-danger p-1\">\n        <small>{error}</small>\n      </div>\n    )}\n  </div>\n);\n\nexport const renderTextAreaField = ({\n  input,\n  label,\n  type,\n  meta: { touched, error },\n}) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <textarea className=\"form-control\" {...input} type={type} />\n    </div>\n    {touched && error && (\n      <div className=\"alert alert-danger p-1\">\n        <small>{error}</small>\n      </div>\n    )}\n  </div>\n);\n\nexport const renderError = (errorMessages) => {\n  if (errorMessages) {\n    return <div className=\"alert alert-danger\">{errorMessages}</div>;\n  }\n};\n","import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport { reduxForm, Field, propTypes } from \"redux-form\";\nimport { Link } from \"react-router-dom\";\nimport { required } from \"redux-form-validators\"\n\nimport { renderField, renderError} from \"../../utils/renderUtils\";\nimport { loginUser } from \"../../actions/authActions\";\n\nclass Login extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Please Log In</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"email\" label=\"Email\" component={renderField}\n                               type=\"text\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"password\" label=\"Password\" component={renderField}\n                               type=\"password\"  validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        { renderError(error) }\n                        <button action=\"submit\" className=\"btn btn-primary\">Login</button>\n                    </fieldset>\n\n                    <p>Not registered? <Link to=\"/signup\">Signup Here!</Link></p>\n                    <Link to=\"/reset_password\">Forgot password?</Link>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default reduxForm({\n    form: \"login\",\n    onSubmit: loginUser\n})(Login);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\n\nclass Logout extends Component {\n\n    static propTypes = {\n        logoutUser: PropTypes.func.isRequired\n    };\n\n    componentWillMount() {\n        this.props.logoutUser();\n    }\n\n    render() {\n        return (\n            <h2>Sorry to see you go...</h2>\n        );\n    }\n}\n\nexport default connect(null, { logoutUser })(Logout);","import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport { reduxForm, Field, propTypes } from \"redux-form\";\nimport { required } from \"redux-form-validators\"\nimport { renderField, renderError } from \"../../utils/renderUtils\";\nimport { signupUser } from \"../../actions/authActions\";\n\nclass Signup extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Sign Up</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"email\" label=\"Email\" component={renderField}\n                               type=\"text\"/>\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"username\" label=\"Username\" component={renderField}\n                               type=\"text\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"password1\" label=\"Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"password2\" label=\"Confirm Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    {/* { renderError(error) } */}\n\n                    <fieldset className=\"form-group\">\n                        <button action=\"submit\" className=\"btn btn-primary\">Sign Up</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n}\n\n// Sync field level validation for password match\nconst validateForm = values => {\n    const errors = {};\n    const { password1, password2 } = values;\n    if (password1 !== password2) {\n        errors.password2 = \"Password does not match.\"\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: \"signup\",\n    validate: validateForm,\n    onSubmit: signupUser\n})(Signup);\n","import React, { Component } from \"react\";\n\nexport default class SignupDone extends Component {\n    render() {\n        return (\n            <h3 className=\"mx-5\">\n                Thanks for your registration, please follow the link sent to your provided email to activate\n                your account.\n            </h3>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { reduxForm, propTypes } from \"redux-form\";\nimport { activateUserAccount } from \"../../actions/authActions\";\nimport { renderError } from \"../../utils/renderUtils\";\n\nclass AccountActivation extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Please click the button below to activate your account</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        {renderError(error)}\n                        <button action=\"submit\" className=\"btn btn-primary\">Activate</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: \"user_account_activation\",\n    onSubmit: activateUserAccount,\n})(AccountActivation);\n","import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport { reduxForm, Field, propTypes } from \"redux-form\";\nimport { required } from \"redux-form-validators\"\nimport { changePassword } from \"../../actions/authActions\";\nimport { renderField, renderError } from \"../../utils/renderUtils\";\n\nclass PasswordChange extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Change Password</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"old_password\" label=\"Old Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"new_password1\" label=\"New Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"new_password2\" label=\"Confirm New Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        {renderError(error)}\n                        <button action=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n}\n\n// Sync field level validation for password match\nconst validateForm = values => {\n    const errors = {};\n    const { new_password1, new_password2 } = values;\n    if (new_password1 !== new_password2) {\n        errors.new_password2 = \"Password does not match.\"\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: \"change_password\",\n    onSubmit: changePassword,\n    validate: validateForm\n})(PasswordChange);\n","import React, { Component } from \"react\";\nimport { reduxForm, Field, propTypes } from \"redux-form\";\nimport { required } from \"redux-form-validators\"\n\nimport { renderField, renderError} from \"../../utils/renderUtils\";\nimport { resetPassword } from \"../../actions/authActions\";\n\nclass PasswordReset extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Reset Your Password</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"email\" label=\"Please enter your email\" component={renderField}\n                               type=\"text\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        { renderError(error) }\n                        <button action=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </fieldset>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default reduxForm({\n    form: \"password_reset\",\n    onSubmit: resetPassword\n})(PasswordReset);\n","import React, { Component } from \"react\";\n\nexport default class PasswordResetDone extends Component {\n    render() {\n        return (\n            <h3 className=\"mx-5\">An password reset email has been sent to your email. Please follow the link to reset your password.</h3>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { reduxForm, Field, propTypes } from \"redux-form\";\nimport { required } from \"redux-form-validators\"\nimport { confirmPasswordChange } from \"../../actions/authActions\";\nimport { renderField, renderError } from \"../../utils/renderUtils\";\n\nclass PasswordResetConfirm extends Component {\n\n    static propTypes = {\n        ...propTypes\n    };\n\n    render() {\n        const { handleSubmit, error } = this.props;\n\n        return (\n            <div className=\"row justify-content-center\">\n                <form\n                    className=\"col col-sm-4 card mt-5 p-2\"\n                    onSubmit={handleSubmit}\n                >\n                    <h4 className=\"text-md-center\">Create New Password</h4>\n                    <hr/>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"new_password1\" label=\"New Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        <Field name=\"new_password2\" label=\"Confirm New Password\" component={renderField}\n                               type=\"password\" validate={[required({message: \"This field is required.\"})]}\n                        />\n                    </fieldset>\n\n                    <fieldset className=\"form-group\">\n                        {renderError(error)}\n                        <button action=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n}\n\n// Sync field level validation for password match\nconst validateForm = values => {\n    const errors = {};\n    const { new_password1, new_password2 } = values;\n    if (new_password1 !== new_password2) {\n        errors.new_password2 = \"Password does not match.\"\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: \"password_reset_confirm\",\n    onSubmit: confirmPasswordChange,\n    validate: validateForm\n})(PasswordResetConfirm);\n","import React from \"react\";\n\nconst NoMatch = () => (\n  <h2 className=\"mt-2\">\n    {\"Sorry, the page you are looking for doesn't exist.\"}\n  </h2>\n);\n\nexport default NoMatch;\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\n\nimport { Image, Container, Input, Button, Segment } from \"semantic-ui-react\";\n\nimport { AlohomoraUrls } from \"../../constants/urls\";\nimport store from \"../../store\";\nimport { getUserToken } from \"../../utils/authUtils\";\nimport history from \"../../utils/historyUtils\";\n\nimport { actions as notifActions } from \"redux-notifications\";\n\nimport \"./Question.css\";\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionInfo: {},\n      answer: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const { question_on } = this.props;\n\n    const questionUrl = AlohomoraUrls.QUESTION + question_on.toString();\n    const token = getUserToken(store.getState());\n    const headers = { authorization: \"Token \" + token };\n\n    const reqToGetQuestion = axios({\n      method: \"get\",\n      url: questionUrl,\n      headers: headers,\n    });\n\n    if (token) {\n      axios\n        .all([reqToGetQuestion])\n        .then(\n          axios.spread((questionRes) => {\n            this.setState({\n              questionInfo: questionRes.data,\n            });\n          })\n        )\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  answerChangeHandle = (e) => {\n    this.setState({\n      answer: e.target.value,\n    });\n  };\n\n  checkAnswer = () => {\n    const checkAnswerUrl = AlohomoraUrls.CHECK_ANSWER;\n    const token = getUserToken(store.getState());\n    const headers = { authorization: \"Token \" + token };\n\n    const { notifSend } = notifActions;\n\n    var formData = new FormData();\n    formData.append(\"answer\", this.state.answer);\n\n    if (token) {\n      axios({\n        method: \"post\",\n        url: checkAnswerUrl,\n        data: formData,\n        headers: headers,\n      })\n        .then((response) => {\n          this.setState({\n            answer: \"\",\n          });\n          if (response.data === \"Correct\") {\n            store.dispatch(\n              notifSend({\n                message: \"Congratulations! You answer was Right !\",\n                kind: \"success\",\n                dismissAfter: 4000,\n              })\n            );\n            history.push(\"/\");\n          } else {\n            store.dispatch(\n              notifSend({\n                message: \"Answer was incorrect\",\n                kind: \"warning\",\n                dismissAfter: 2000,\n              })\n            );\n          }\n        })\n        .catch((error) => {\n          console.log(\"error\");\n        });\n    }\n  };\n\n  handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      this.checkAnswer();\n    }\n  };\n\n  render() {\n    return (\n      <Container textAlign=\"center\" text>\n        {this.state.questionInfo.image !== null && (\n          <Image\n            centered\n            src={this.state.questionInfo.image}\n            size=\"medium\"\n          ></Image>\n        )}\n        {this.state.questionInfo.question_text !== \"\" && (\n          <Segment size=\"large\" textAlign=\"center\">\n            {this.state.questionInfo.question_text}\n          </Segment>\n        )}\n        <Input\n          focus\n          placeholder=\"Answer here..\"\n          size=\"small\"\n          className=\"answer-input\"\n          onChange={this.answerChangeHandle}\n          onKeyPress={this.handleKeyPress}\n          value={this.state.answer}\n        />\n        <Button positive onClick={this.checkAnswer}>\n          Check Answer\n        </Button>\n      </Container>\n    );\n  }\n}\n\nexport default Question;\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport \"./HomePage.css\";\n\nimport { Sidebar, Menu, Label, Loader } from \"semantic-ui-react\";\n\nimport { AlohomoraUrls } from \"../../constants/urls\";\nimport store from \"../../store\";\nimport { getUserToken } from \"../../utils/authUtils\";\n\nimport Question from \"./Question\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInfo: {},\n      profileInfo: [],\n      loaded: false,\n    };\n  }\n\n  componentDidMount() {\n    const selfUserUrl = AlohomoraUrls.SELF_USER;\n    const profileUrl = AlohomoraUrls.PROFILE;\n    const token = getUserToken(store.getState());\n    const headers = { authorization: \"Token \" + token };\n\n    const reqToSelfUser = axios({\n      method: \"get\",\n      url: selfUserUrl,\n      headers: headers,\n    });\n\n    const reqToProfile = axios({\n      method: \"get\",\n      url: profileUrl,\n      headers: headers,\n    });\n\n    if (token) {\n      axios\n        .all([reqToSelfUser, reqToProfile])\n        .then(\n          axios.spread((selfUserRes, profileRes) => {\n            this.setState({\n              userInfo: selfUserRes.data,\n              profileInfo: profileRes.data.results,\n              loaded: true,\n            });\n          })\n        )\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  render() {\n    if (this.state.loaded) {\n      return (\n        <React.Fragment>\n          <Sidebar\n            as={Menu}\n            animation=\"overlay\"\n            icon=\"labeled\"\n            inverted\n            vertical\n            visible\n            width=\"wide\"\n            direction=\"right\"\n            style={{ width: 260 }}\n          >\n            <Label size=\"medium\" color=\"white\">\n              LeaderBoard\n            </Label>\n            {this.state.profileInfo.map((userprofile, index) => (\n              <Menu.Item header>\n                {index + 1}\n                {\". \"}\n                {userprofile.user.username}\n                <Label>{userprofile.question_on}</Label>\n              </Menu.Item>\n            ))}\n          </Sidebar>\n          <Sidebar.Pusher className=\"question-center\">\n            <div>\n              <Question question_on={this.state.userInfo.question_on} />\n            </div>\n          </Sidebar.Pusher>\n        </React.Fragment>\n      );\n    } else {\n      return <Loader active size=\"large\" />;\n    }\n  }\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport RequireAuth from \"./auth/RequireAuth\";\nimport Login from \"./auth/Login\";\nimport Logout from \"./auth/Logout\";\nimport Signup from \"./auth/Signup\";\nimport SignupDone from \"./auth/SignupDone\";\nimport AccountActivation from \"./auth/AccountActivation\";\nimport PasswordChange from \"./auth/PasswordChange\";\nimport PasswordReset from \"./auth/PasswordReset\";\nimport PasswordResetDone from \"./auth/PasswordResetDone\";\nimport PasswordResetConfirm from \"./auth/PasswordResetConfirm\";\nimport NoMatch from \"./NoMatch\";\nimport HomePage from \"./HomePage/HomePage\";\n\nimport \"./MainContent.css\";\n// import Profo from \"./profo\";\n\nconst MainContent = () => (\n  <div className=\"MainDiv\">\n    <div className=\"MainComponents\">\n      <Switch>\n        <Route exact path=\"/\" component={RequireAuth(HomePage)} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/logout\" component={Logout} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route\n          path=\"/account-confirm-email/:key\"\n          component={AccountActivation}\n        />\n        <Route path=\"/signup_done\" component={SignupDone} />\n        <Route path=\"/reset_password\" component={PasswordReset} />\n        <Route path=\"/reset_password_done\" component={PasswordResetDone} />\n        <Route\n          path=\"/reset_password_confirm/:uid/:token/\"\n          component={PasswordResetConfirm}\n        />\n        <Route\n          path=\"/change_password\"\n          component={RequireAuth(PasswordChange)}\n        />\n\n        <Route component={NoMatch} />\n      </Switch>\n    </div>\n  </div>\n);\n\nexport default MainContent;\n","import React, { Component } from \"react\";\nimport { Notifs } from \"redux-notifications\";\nimport MainContent from \"./MainContent\";\nimport \"./App.css\";\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Notifs />\n        <MainContent />\n      </div>\n    );\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"redux-notifications/lib/styles.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport history from \"./utils/historyUtils\";\nimport { authLogin } from \"./actions/authActions\";\nimport App from \"./components/App\";\n\nconst token = localStorage.getItem(\"token\");\n\nif (token) {\n  store.dispatch(authLogin(token));\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}